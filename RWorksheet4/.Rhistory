Name <- c("Annie", "Thea", "Steve", "Hanna")
Grade1 <- c(85, 65, 75, 95)
Grade2 <- c(65, 75, 55, 75)
Grade3 <- c(85, 90, 80, 100)
Grade4 <- c(100, 90, 85, 90)
Student_grades <- data.frame(Name, Grade1, Grade2, Grade3, Grade4)
Student_grades
#b. Without using the rowMean function, output the average score of students whose average math score over 90 points during the semester. write R code and its output. Example Output: Annie’s average grade this semester is 88.75.
ave_grades <- apply(Student_grades[,2:5], 1, function(x) sum(x) / length(x) )
ave_grades
high_achievers <- grades$Name[ave_grades > 90]
Name <- c("Annie", "Thea", "Steve", "Hanna")
Grade1 <- c(85, 65, 75, 95)
Grade2 <- c(65, 75, 55, 75)
Grade3 <- c(85, 90, 80, 100)
Grade4 <- c(100, 90, 85, 90)
Student_grades <- data.frame(Name, Grade1, Grade2, Grade3, Grade4)
Student_grades
#b. Without using the rowMean function, output the average score of students whose average math score over 90 points during the semester. write R code and its output. Example Output: Annie’s average grade this semester is 88.75.
ave_grades <- apply(Student_grades[,2:5], 1, function(x) sum(x) / length(x) )
ave_grades
high_achievers <- Student_grades$Name[ave_grades > 90]
high_achiever_averages <- ave_grades[ave_grades > 90]
for (i in 1:nrow(grades)) {
if (ave_grades[i] > 90) {
cat(Student_grades$Name[i], "'s average grade this semester is ", ave_grades[i], ".\n", sep = "")
}
}
ave_grades <- apply(Student_grades[,2:5], 1, function(x) sum(x) / length(x) )
ave_grades
high_achievers <- Student_grades$Name[ave_grades > 90]
high_achiever_averages <- ave_grades[ave_grades > 90]
for (i in 1:length(ave_grades)) {
if (ave_grades[i] > 90) {
cat(Student_grades$Name[i], "'s average grade this semester is ", ave_grades[i], ".\n", sep = "")
}
}
ave_grades <- apply(Student_grades[,2:5], 1, function(x) sum(x) / length(x) )
ave_grades
high_achievers <- Student_grades$Name[ave_grades > 90]
high_achiever_averages <- ave_grades[ave_grades > 90]
for (i in 1:length(ave_grades)) {
if (ave_grades[i] > 90) {
cat(Student_grades$Name[i], "'s average grade this semester is ", ave_grades[i], ".\n", sep = "")
}
}
#1. The table below shows the data about shoe size and height. Create a data frame.
ShoeSize <- c(6.5,9.0,8.5,8.5,10.5,7.0,9.5,9.0,13.0,7.5,10.5,8.5,12.0,10.5,13.0,11.5,8.5,5.0,10.0,6.5,7.5,8.5,10.5,8.5,10.5,11.0,9.0,13.0)
Height <- c(66.0,68.0,64.5,65.0,70.0,64.0,70.0,71.0,72.0,64.0,74.5,67.0,71.0,71.0,77.0,72.0,59.0,62.0,72.0,66.0,64.0,67.0,73.0,69.0,72.0,70.0,69.0,70.0)
Gender <- c("F","F","F","F","M","F","F","F","M","F","M","F","M","M","M","M","F","F","M","F","F","M","M","F","M","M","M","M")
Household<-data.frame(ShoeSize,Height,Gender)
names(Household) <-c("Shoe size","Height","Gender")
Household
#a. Describe the data.
#The table contains data on shoe sizes, heights, and genders for a group of individuals
`
#b.
Males <- subset(Household, Gender == "M", select = c("Shoe size", "Height","Gender"))
Males
Females <- subset(Household, Gender == "F", select = c("Shoe size", "Height","Gender"))
Females
#c
MeanShoe <-mean(ShoeSize)
MeanShoe
MeanHeight <-mean(Height)
MeanHeight
#d
#Yes, there is likely a relationship between shoe size and height.Taller individuals tend to have larger feet, which means they usually wear larger shoe sizes.
#1. The table below shows the data about shoe size and height. Create a data frame.
ShoeSize <- c(6.5,9.0,8.5,8.5,10.5,7.0,9.5,9.0,13.0,7.5,10.5,8.5,12.0,10.5,13.0,11.5,8.5,5.0,10.0,6.5,7.5,8.5,10.5,8.5,10.5,11.0,9.0,13.0)
Height <- c(66.0,68.0,64.5,65.0,70.0,64.0,70.0,71.0,72.0,64.0,74.5,67.0,71.0,71.0,77.0,72.0,59.0,62.0,72.0,66.0,64.0,67.0,73.0,69.0,72.0,70.0,69.0,70.0)
Gender <- c("F","F","F","F","M","F","F","F","M","F","M","F","M","M","M","M","F","F","M","F","F","M","M","F","M","M","M","M")
Household<-data.frame(ShoeSize,Height,Gender)
names(Household) <-c("Shoe size","Height","Gender")
Household
#a. Describe the data.
#The table contains data on shoe sizes, heights, and genders for a group of individuals
`
#b.
Males <- subset(Household, Gender == "M", select = c("Shoe size", "Height","Gender"))
Males
Females <- subset(Household, Gender == "F", select = c("Shoe size", "Height","Gender"))
Females
#c
MeanShoe <-mean(ShoeSize)
MeanShoe
MeanHeight <-mean(Height)
MeanHeight
#d
#Yes, there is likely a relationship between shoe size and height.Taller individuals tend to have larger feet, which means they usually wear larger shoe sizes.
#1. The table below shows the data about shoe size and height. Create a data frame.
ShoeSize <- c(6.5,9.0,8.5,8.5,10.5,7.0,9.5,9.0,13.0,7.5,10.5,8.5,12.0,10.5,13.0,11.5,8.5,5.0,10.0,6.5,7.5,8.5,10.5,8.5,10.5,11.0,9.0,13.0)
Height <- c(66.0,68.0,64.5,65.0,70.0,64.0,70.0,71.0,72.0,64.0,74.5,67.0,71.0,71.0,77.0,72.0,59.0,62.0,72.0,66.0,64.0,67.0,73.0,69.0,72.0,70.0,69.0,70.0)
Gender <- c("F","F","F","F","M","F","F","F","M","F","M","F","M","M","M","M","F","F","M","F","F","M","M","F","M","M","M","M")
Household<-data.frame(ShoeSize,Height,Gender)
names(Household) <-c("Shoe size","Height","Gender")
Household
#a. Describe the data.
#The table contains data on shoe sizes, heights, and genders for a group of individuals
#b.
Males <- subset(Household, Gender == "M", select = c("Shoe size", "Height","Gender"))
Males
Females <- subset(Household, Gender == "F", select = c("Shoe size", "Height","Gender"))
Females
#c
MeanShoe <-mean(ShoeSize)
MeanShoe
MeanHeight <-mean(Height)
MeanHeight
#d
#Yes, there is likely a relationship between shoe size and height.Taller individuals tend to have larger feet, which means they usually wear larger shoe sizes.
#2 Construct character vector months to a factor with factor() and assign the result to factor_months_vector. Print out factor_months_vector and assert that R prints out the factor levels below the actual values.
months_vector<- c("March","April","January","November","January","September","October","September","November","August","January","November","November","February","May","August","July","December","August","August","September","November","February","April")
factor_months_vector<-factor(months_vector)
factor_months_vector
#3 Then check the summary() of the months_vector and factor_months_vector. | Inter-pret the results of both vectors. Are they both equally useful in this case?
SumMonths<-summary(months_vector)
SumMonths
SumFactor<-summary(factor_months_vector)
SumFactor
#4 Create a vector and factor for the table below.
direction<- c("East","West","North")
frequency<- c(1,4,3)
new_order_data <- factor(direction, levels = c("East","West","North"))
new_order_data
DirectFreq <- data.frame(Direction = direction, Frequency = frequency)
DirectFreq
#5 Enter the data below in Excel with file name = import_march.csv
#a Import the excel file into the Environment Pane using read.table() function. Write the code.
data <- read.table("import_march.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
#b View the dataset. Write the R scripts and its result.
data <- read.table("import_march.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
data
#6
#a Create an R Program that allows the User to randomly select numbers from 1 to 50. Then display the chosen number. If the number is beyond the range of the selected choice, it will have to display a string “The number selected is beyond the range of 1 to 50”. If number 20 is inputted by the User, it will have to display “TRUE”, otherwise display the input number.
SelectedNum <- as.integer(readline(prompt = "Enter a number between 1 and 50: "))
if (SelectedNum < 1 || SelectedNum > 50) {
cat("The number selected is beyond the range of 1 to 50\n")
} else if (SelectedNum == 20) {
cat("TRUE\n")
} else {
cat("The chosen number is:", SelectedNum, "\n")
}
#7
#a Write a function that prints the minimum number of bills that must be paid, given the price of the snack. Input: Price of snack (a random number divisible by 50) Output: Minimum number of bills needed to purchase a snack.
Bills <- c(1000, 500, 200, 100, 50)
count <- 0
minimum_bills <- function(price){
for(bill in bills){
if(price >= bill){
count <- count + price %% bill
price <- price %% bill
}
}
cat("Minimum number of bills needed to purchase a snack:", count, "\n")
}
min_bills(2500)
#8
#a. Create a dataframe from the above table. Write the R codes and its output.
Name <- c("Annie", "Thea", "Steve", "Hanna")
Grade1 <- c(85, 65, 75, 95)
Grade2 <- c(65, 75, 55, 75)
Grade3 <- c(85, 90, 80, 100)
Grade4 <- c(100, 90, 85, 90)
Student_grades <- data.frame(Name, Grade1, Grade2, Grade3, Grade4)
Student_grades
#b. Without using the rowMean function, output the average score of students whose average math score over 90 points during the semester. write R code and its output. Example Output: Annie’s average grade this semester is 88.75.
ave_grades <- apply(Student_grades[,2:5], 1, function(x) sum(x) / length(x) )
ave_grades
high_achievers <- Student_grades$Name[ave_grades > 90]
high_achiever_averages <- ave_grades[ave_grades > 90]
for (i in 1:length(ave_grades)) {
if (ave_grades[i] > 90) {
cat(Student_grades$Name[i], "'s average grade this semester is ", ave_grades[i], ".\n", sep = "")
}
}
for (j in 2:5) {
average_score <- sum(grades[, j]) / nrow(grades)
if (average_score < 80) {
cat("The ", names(grades)[j], " test was difficult.\n", sep = "")
}
}
for (j in 2:5) {
average_score <- sum(Student_grades[, j]) / nrow(Student_grades)
if (average_score < 80) {
cat("The ", names(Student_grades)[j], " test was difficult.\n", sep = "")
}
}
for (i in 1:nrow(grades)) {
Highest_Grade <- sort(as.numeric(grades[i, 2:5]), decreasing = TRUE)[1]
if (Highest_Grade > 90) {
cat(grades$Name[i], "'s highest grade this semester is ", highest_grade, ".\n", sep = "")
}
for (i in 1:nrow(grades)) {
Highest_Grade <- sort(as.numeric(grades[i, 2:5]), decreasing = TRUE)[1]
if (Highest_Grade > 90) {
cat(grades$Name[i], "'s highest grade this semester is ", highest_grade, ".\n", sep = "")
}
}
#d. Without using the max function, output as follows for students whose highest score for a semester exceeds 90 points. Example Output: Annie’s highest grade this semester is 95.
for (i in 1:nrow(grades)) {
Highest_Grade <- sort(as.numeric(grades[i, 2:5]), decreasing = TRUE)[1]
if (Highest_Grade > 90) {
cat(grades$Name[i], "'s highest grade this semester is ", highest_grade, ".\n", sep = "")
}
}
for (i in 1:nrow(grades)) {
Highest_Grade <- sort(as.numeric(grades[i, 2:5]), decreasing = TRUE)[1]
if (Highest_Grade > 90) {
cat(grades$Name[i], "'s highest grade this semester is ", highest_grade, ".\n", sep = "")
}
}
for (i in 1:nrow(grades)) {
Highest_Grade <- sort(as.numeric(Student_grades[i, 2:5]), decreasing = TRUE)[1]
if (Highest_Grade > 90) {
cat(Student_grades$Name[i], "'s highest grade this semester is ", highest_grade, ".\n", sep = "")
}
}
for (i in 1:nrow(Student_grades)) {
Highest_Grade <- sort(as.numeric(Student_grades[i, 2:5]), decreasing = TRUE)[1]
if (Highest_Grade > 90) {
cat(Student_grades$Name[i], "'s highest grade this semester is ", highest_grade, ".\n", sep = "")
}
}
for (i in 1:nrow(Student_grades)) {
Highest_Grade <- sort(as.numeric(Student_grades[i, 2:5]), decreasing = TRUE)[1]
if (Highest_Grade > 90) {
cat(Student_grades$Name[i], "'s highest grade this semester is ", Highest_Grade, ".\n", sep = "")
}
}
#7
#a Write a function that prints the minimum number of bills that must be paid, given the price of the snack. Input: Price of snack (a random number divisible by 50) Output: Minimum number of bills needed to purchase a snack.
Bills <- c(1000, 500, 200, 100, 50)
count <- 0
minimum_bills <- function(price){
for(bill in bills){
if(price >= bill){
count <- count + price %% bill
price <- price %% bill
}
}
cat("Minimum number of bills needed to purchase a snack:", count, "\n")
}
minimum_bills(2500)
#7
#a Write a function that prints the minimum number of bills that must be paid, given the price of the snack. Input: Price of snack (a random number divisible by 50) Output: Minimum number of bills needed to purchase a snack.
minimum_bills <- function(price){
bills <- c(1000, 500, 200, 100, 50)
count <- 0
for(bill in bills) {
if(price >= bill) {
count <- count + price %/% bill
price <- price %% bill
}
}
cat("Minimum number of bills needed to purchase a snack:", count, "\n")
}
minimum_bills(2500)
vectorA <- c(1, 2, 3, 4, 5)
matrix_result <- matrix(0, nrow = 5, ncol = 5)
for (i in 1:5) {
for (j in 1:5) {
matrix_result[i, j] <- abs(vectorA[i] - vectorA[j])
}
}
print(matrix_result)
rows = 5
for i in range(1, rows + 1):
#2. Print the string "*" using for() function. The output should be the same as shown in Figure
rows = 5
for i in range(1, rows + 1):
#2. Print the string "*" using for() function. The output should be the same as shown in Figure
rows <- 5
for (i in 1:rows) {
cat(rep("*", i), "\n")
}
rows <- 5
for (i in 1:rows) {
cat(rep("*", i++), "\n")
rows <- 5
for (i in 1:rows) {
cat(rep("*", i), "\n")
}
a <- 0
b <- 1
cat("Fibonacci sequence starting from", start_num, "up to 500:\n")
a <- 0
b <- 1
cat("Fibonacci sequence starting from", Starting_num, "up to 500:\n")
starting_num <- as.integer(readline(prompt = "Enter the starting number for the Fibonacci sequence: "))
a <- 0
b <- 1
cat("Fibonacci sequence starting from", Starting_num, "up to 500:\n")
#3. Get an input from the user to print the Fibonacci sequence starting from the 1st input up to 500. Use repeat and break statements. Write the R Scripts and its output.
start_num <- as.integer(readline(prompt = "Enter the starting number for the Fibonacci sequence: "))
a <- 0
b <- 1
cat("Fibonacci sequence starting from", start_num, "up to 500:\n")
repeat {
fib <- a + b
if (fib > 500) {
break
}
a <- b
b <- fib
if (fib >= start_num) {
cat(fib, "\n")
}
}
#3. Get an input from the user to print the Fibonacci sequence starting from the 1st input up to 500. Use repeat and break statements. Write the R Scripts and its output.
start_num <- as.integer(readline(prompt = "Enter the starting number for the Fibonacci sequence: "))
a <- 0
b <- 1
cat("Fibonacci sequence starting from", start_num, "up to 500:\n")
repeat {
fibonacci <- a + b
if (fibonacci > 500) {
break
}
a <- b
b <- fibonacci
if (fibonacci >= start_num) {
cat(fib, "\n")
}
}
#3. Get an input from the user to print the Fibonacci sequence starting from the 1st input up to 500. Use repeat and break statements. Write the R Scripts and its output.
start_num <- as.integer(readline(prompt = "Enter the starting number for the Fibonacci sequence: "))
a <- 0
b <- 1
cat("Fibonacci sequence starting from", start_num, "up to 500:\n")
repeat {
fib <- a + b
if (fib > 500) {
break
}
a <- b
b <- fib
if (fib >= start_num) {
cat(fib, "\n")
}
}
shoe_sizes <- read_csv("Shoe sizes.csv")
install.packages("readr")
library(readr)
shoe_sizes <- read_csv("Shoe sizes.csv")
print(head(shoe_sizes))
shoe_sizes <- read_csv("Shoe sizes.csv")
print(head(shoe_sizes))
male_subset <- shoe_sizes %>% filter(Gender == "Male")
male_subset <- shoe_sizes %% filter(Gender == "Male")
library(dplyr)
Shoe_sizes <- read_csv("Shoe sizes.csv")
male_subset <- shoe_sizes %>% filter(Gender == "Male")
Shoe_sizes <- read_csv("Shoe sizes.csv")
male_subset <- shoe_sizes %>% filter(Gender == "Male")
male_subset <- filter(shoe_sizes, Gender == "Male")
male_subset <- filter(shoe_sizes, Gender == "Male")
library(readr)
library(dplyr)
male_subset <- filter(shoe_sizes, Gender == "Male")
shoe_sizes <- read_csv("Shoe sizes.csv",header = TRUE, sep = ",")
shoe_sizes <- read_csv("Shoe sizes.csv",header = TRUE, sep = ",")
shoe_sizes <- read_csv("Shoe sizes.csv")
print(head(shoe_sizes))
male_sub <- subset(shoe_sizes, Gender == "M")
shoeSize <- c(6.5, 9.0, 8.5, 8.5, 10.5, 7.0, 9.5, 9.0, 13.0, 7.5, 10.5, 8.5, 12.0, 10.5, 13.0, 11.5, 8.5, 5.0, 10.0, 6.5, 7.5, 8.5, 10.5, 8.5, 10.5, 11.0, 9.0, 13.0)
Height <- c(66.0, 68.0, 64.5, 65.0, 70.0, 64.0, 70.0, 71.0, 72.0, 64.0, 74.5, 67.0, 71.0, 71.0, 77.0, 72.0, 59.0, 62.0, 72.0, 66.0, 64.0, 67.0, 73.0, 69.0, 72.0, 70.0, 69.0, 70.0)
Gender <- c("F", "F", "F", "F", "M", "F", "F", "F", "M", "F", "M", "F", "M", "M", "M", "M", "F", "F", "M", "F", "F", "M", "M", "F", "M", "M", "M", "M")
Shoe_SHG <- data.frame(shoeSize, Height, Gender)
names(Shoe_SHG) <- c("Shoe Size", "Height", "Gender")
Shoe_SHG
write.csv(Shoe_SHG, file = "Shoe_SHG.csv", row.names = FALSE)
Data <- read.csv("Shoe_SHG.csv", header = TRUE, sep = ",")
SHG[1:6,]
Data <- read.csv("Shoe_SHG.csv", header = TRUE, sep = ",")
Shoe_SHG[1:6,]
male_sub <- subset(Data, Gender == "M")
female_sub <- subset(Data, Gender == "F")
num_male <- nrow(male_sub)
num_female <- nrow(female_sub)
cat("Number of Male observations:", num_male, "\n")
cat("Number of Female observations:", num_female, "\n")
#c. Create a graph for the number of males and females for Household Data. Use plot(),
chart type = barplot. Make sure to place title, legends, and colors. Write the R scripts and
gender_count <- table(Shoe_SHG$Gender)
bar_colors <- c("red", "green")
barplot(gender_count,
main = "Number of Males and Females in Household Data",
xlab = "Gender",
ylab = "Number of Observations",
col = bar_colors,
legend = rownames(gender_count),
beside = TRUE)
grid(nx = NULL, ny = NULL)
Expenses <- c(Food = 60, Electricity = 10, Savings = 5, Miscellaneous = 25)
percent_labels <- paste0(names(spending), ": ", round(spending / sum(spending) * 100, 1), "%")
Expenses <- c(Food = 60, Electricity = 10, Savings = 5, Miscellaneous = 25)
percent_labels <- paste0(names(Expenses), ": ", round(spending / sum(spending) * 100, 1), "%")
Expenses <- c(Food = 60, Electricity = 10, Savings = 5, Miscellaneous = 25)
percent_labels <- paste0(names(Expenses), ": ", round(Expenses / sum(Expenses) * 100, 1), "%")
colors <- c("red", "cyan", "green", "yellow")
pie(spending,
labels = percent_labels,
col = colors,
main = "Dela Cruz Family Monthly Income Distribution"
)
Expenses <- c(Food = 60, Electricity = 10, Savings = 5, Miscellaneous = 25)
percent_labels <- paste0(names(Expenses), ": ", round(Expenses / sum(Expenses) * 100, 1), "%")
colors <- c("red", "cyan", "green", "yellow")
pie(Expenses,
labels = percent_labels,
col = colors,
main = "Dela Cruz Family Monthly Income Distribution"
)
data(iris)
data(iris)
str(iris)
ValMean <- colMeans(iris[, c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")])
ValMean
species_quantity <- table(iris$Species)
pie(species_quantity,
labels = paste(names(species_quantity), ": ", round(species_quantity / sum(species_quantity) * 100, 1), "%", sep=""),
col = c("lightblue", "lightgreen", "lightcoral"),
main = "Species Distribution in Iris Dataset"
)
setosa_subset <- tail(subset(iris, Species == "setosa"), 6)
versicolor_subset <- tail(subset(iris, Species == "versicolor"), 6)
virginica_subset <- tail(subset(iris, Species == "virginica"), 6)
setosa_subset
versicolor_subset
virginica_subset
plot(iris$Sepal.Length, iris$Sepal.Width,
col = iris$Species,
pch = 19,
xlab = "Sepal Length",
ylab = "Sepal Width",
main = "Iris Dataset",
sub = "Sepal width and length by Species"
)
legend("topright", legend = levels(iris$Species),
col = 1:3, pch = 19)
library(readxl)
data_alexa <- read_excel("alexa_file.xlsx")
#a Rename the white and black variants by using gsub() function.
data_alexa$variation <- gsub("Black\\s+Dot", "Black Dot", alexa_data$variation)
#7. Import the alexa-file.xlsx. Check on the variations. Notice that there are extra whitespaces among black variants (Black Dot, Black Plus, Black Show, BlackSpot). Also on the white variants (White Dot, White Plus, White Show, White Spot).
library(readxl)
data_alexa <- read_excel("alexa_file.xlsx")
#a Rename the white and black variants by using gsub() function.
data_alexa$variation <- gsub("Black\\s+Dot", "Black Dot", data_alexa$variation)
data_alexa$variation <- gsub("Black\\s+Plus", "Black Plus", data_alexa$variation)
data_alexa$variation <- gsub("Black\\s+Show", "Black Show", data_alexa$variation)
data_alexa$variation <- gsub("Black\\s+Spot", "Black Spot", data_alexa$variation)
data_alexa$variation <- gsub("White\\s+Dot", "White Dot", data_alexa$variation)
data_alexa$variation <- gsub("White\\s+Plus", "White Plus", data_alexa$variation)
data_alexa$variation <- gsub("White\\s+Show", "White Show", data_alexa$variation)
data_alexa$variation <- gsub("White\\s+Spot", "White Spot", data_alexa$variation)
table(alexa_data$variation)
#7. Import the alexa-file.xlsx. Check on the variations. Notice that there are extra whitespaces among black variants (Black Dot, Black Plus, Black Show, BlackSpot). Also on the white variants (White Dot, White Plus, White Show, White Spot).
library(readxl)
data_alexa <- read_excel("alexa_file.xlsx")
#a Rename the white and black variants by using gsub() function.
data_alexa$variation <- gsub("Black\\s+Dot", "Black Dot", data_alexa$variation)
data_alexa$variation <- gsub("Black\\s+Plus", "Black Plus", data_alexa$variation)
data_alexa$variation <- gsub("Black\\s+Show", "Black Show", data_alexa$variation)
data_alexa$variation <- gsub("Black\\s+Spot", "Black Spot", data_alexa$variation)
data_alexa$variation <- gsub("White\\s+Dot", "White Dot", data_alexa$variation)
data_alexa$variation <- gsub("White\\s+Plus", "White Plus", data_alexa$variation)
data_alexa$variation <- gsub("White\\s+Show", "White Show", data_alexa$variation)
data_alexa$variation <- gsub("White\\s+Spot", "White Spot", data_alexa$variation)
table(data_alexa$variation)
library(dplyr)
variations_count <- data_alexa %>%
count(variation, name = "Total")
save(variations_count, file = "variations.RData")
print(variations_count)
library(ggplot2)
load("variations.RData")
ggplot(variations_count, aes(x = variation, y = Total, fill = variation)) +
geom_bar(stat = "identity") +
ggtitle("Total Count of Alexa Variations") +
xlab("Variation") +
ylab("Total Numbers") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set3")
variations_count$Category <- ifelse(grepl("Black", variations_count$variation), "Black Variants",
ifelse(grepl("White", variations_count$variation), "White Variants", NA))
black_white_variants <- variations_count %>% filter(!is.na(Category))
ggplot(black_white_variants, aes(x = variation, y = Total, fill = variation)) +
geom_bar(stat = "identity") +
facet_wrap(~ Category, scales = "free_x") +
ggtitle("Counts of Alexa Black and White Variants") +
xlab("Variation") +
ylab("Total Numbers") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set2")
#4. Import the dataset as shown in Figure 1 you have created previously.
#a. What is the R script for importing an excel or a csv file? Display the first 6 rows of the dataset? Show your codes and its result
Data <- read.csv("Shoe_SHG.csv", header = TRUE, sep = ",")
Shoe_SHG[1:6,]
Data <- read.csv("Shoe_SHG.csv", header = TRUE, sep = ",")
Data[1:6,
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(readxl)
library(dplyr)
install.packages("dplyr")
chooseCRANmirror()
